<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:my="clr-namespace:siege_wpf.circClasses">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.DeepPurple.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <my:AngleToPointConverter x:Key="prConverter" />
    <my:AngleToIsLargeConverter x:Key="isLargeConverter" />
    <my:RadiusToSizeConverter x:Key="sizeConverter" />
    <my:StrokeToStartPointConverter x:Key="spconverter" />
    <my:RadiusToCenterConverter x:Key="rtocConverter" />
    <my:RadiusToDiameter x:Key="radtodia" />
    <my:InnerRadiusConverter x:Key="innerRadConverter" />
    <my:StrokeLineCapConverter x:Key="lineCapConverter" />
    <Style x:Key="CircularProgressBarStyle" TargetType="my:CircularProgressBar">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="my:CircularProgressBar">
                    <Grid
                        Width="{Binding Path=Radius, Converter={StaticResource radtodia},RelativeSource={RelativeSource AncestorType=ProgressBar}}"
                        Height="{Binding Path=Radius, Converter={StaticResource radtodia}, RelativeSource={RelativeSource AncestorType=ProgressBar}}">

                        <Path Stroke="{TemplateBinding Stroke}" 
                              StrokeThickness="{TemplateBinding StrokeThickness}" 
                              Fill="{TemplateBinding Fill}">
                            <Path.Data>
                                <EllipseGeometry
                                    Center="{Binding Path=Radius,Converter={StaticResource rtocConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType=ProgressBar}}">
                                    <EllipseGeometry.RadiusX>
                                        <MultiBinding Converter="{StaticResource innerRadConverter}">
                                            <Binding Path="Radius"
                                                     RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ProgressBar}" />
                                            <Binding Path="Thickness"
                                                     RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ProgressBar}" />
                                            <Binding Path="StrokeMode"
                                                     RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ProgressBar}" />
                                        </MultiBinding>
                                    </EllipseGeometry.RadiusX>
                                    <EllipseGeometry.RadiusY>
                                        <Binding Path="RadiusX" RelativeSource="{RelativeSource Self}" />
                                    </EllipseGeometry.RadiusY>
                                </EllipseGeometry>
                            </Path.Data>
                        </Path>

                        <Path Stroke="{TemplateBinding Background}"
                              StrokeThickness="{TemplateBinding Thickness}">
                            <Path.StrokeStartLineCap>
                                <MultiBinding Converter="{StaticResource lineCapConverter}">
                                    <Binding Path="Value"
                                             RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ProgressBar}"/>
                                    <Binding Path="StartLineCap"
                                             RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ProgressBar}"/>
                                </MultiBinding>
                            </Path.StrokeStartLineCap>
                            <Path.StrokeEndLineCap>
                                <MultiBinding Converter="{StaticResource lineCapConverter}">
                                    <Binding Path="Value"
                                             RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ProgressBar}"/>
                                    <Binding Path="EndLineCap"
                                             RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ProgressBar}"/>
                                </MultiBinding>
                            </Path.StrokeEndLineCap>
                            <Path.Data>
                                <PathGeometry>
                                    <PathFigure>
                                        <PathFigure.StartPoint>
                                            <MultiBinding Converter="{StaticResource spconverter}">
                                                <Binding Path="Radius"
                                                         RelativeSource="{RelativeSource FindAncestor, AncestorType=ProgressBar}" />
                                                <Binding Path="Thickness"
                                                         RelativeSource="{RelativeSource FindAncestor, AncestorType=ProgressBar}" />
                                            </MultiBinding>
                                        </PathFigure.StartPoint>

                                        <ArcSegment x:Name="arcSegment"
                                            RotationAngle="0" SweepDirection="Clockwise"
                                                    IsLargeArc="{Binding Path=Angle, Converter={StaticResource isLargeConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType=ProgressBar}}"
                                                    >
                                            <ArcSegment.Point>
                                                <MultiBinding Converter="{StaticResource prConverter}">
                                                    <Binding Path="Angle"
                                                             RelativeSource="{RelativeSource FindAncestor, AncestorType=ProgressBar}" />
                                                    <Binding Path="Radius"
                                                             RelativeSource="{RelativeSource FindAncestor, AncestorType=ProgressBar}" />
                                                    <Binding Path="Thickness"
                                                             RelativeSource="{RelativeSource FindAncestor, AncestorType=ProgressBar}" />
                                                </MultiBinding>
                                            </ArcSegment.Point>
                                            <ArcSegment.Size>
                                                <MultiBinding Converter="{StaticResource sizeConverter}">
                                                    <Binding Path="Radius"
                                                             RelativeSource="{RelativeSource FindAncestor, AncestorType=ProgressBar}" />
                                                    <Binding Path="Thickness"
                                                             RelativeSource="{RelativeSource FindAncestor, AncestorType=ProgressBar}" />
                                                </MultiBinding>
                                            </ArcSegment.Size>
                                        </ArcSegment>
                                    </PathFigure>
                                </PathGeometry>
                            </Path.Data>
                        </Path>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <Style x:Key="buttonHover" TargetType="Button">
        <Setter Property="Background" Value="#FF1C7BCA"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border" Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="#FF5397D1" CornerRadius="3">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="#FF0d46AA"/>
                            <Setter TargetName="border" Property="BorderThickness" Value="2"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="#AA0d4680"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="buttonPause" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Image Name="Normal" Source="../images/pause.png"/>
                        <Image Name="Hover" Source="../images/play.png" Opacity="0"/>
                        <Image Name="Pressed" Source="../images/pause.png" Opacity="0" />
                    </Grid>
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="MouseDownTimeLine">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.05" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="MouseUpTimeLine">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.25" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="MouseEnterTimeLine">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.25" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="MouseExitTimeLine">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.25" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseDownTimeLine}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseUpTimeLine}"/>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseEnterTimeLine}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource MouseExitTimeLine}"/>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DisTextBox" TargetType="TextBox">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">

                    <Border Name="border" Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="#FFABADB3" CornerRadius="0">
                        <ContentPresenter Name="cP" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding Text}" Margin="2,0,0,0"/>


                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TextBox.IsEnabled" Value="False">
                            <!--
                            <Setter Property="Foreground"  Value="Black" />
                            <Setter TargetName="border" Property="BorderBrush" Value="#FFABADB3"/>
                             -->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!-- <Setter Property="Background" Value="#FF5397D1"/>-->
                            <Setter TargetName="border" Property="BorderBrush" Value="#FF3399FF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DisBigTextBox" TargetType="TextBox">

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">

                    <Border Name="border" Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="#FFABADB3" CornerRadius="0">
                        <ScrollViewer HorizontalAlignment="Left" VerticalAlignment="Top" VerticalScrollBarVisibility="Hidden"  CanContentScroll="True">
                            <ContentPresenter Name="cP" HorizontalAlignment="Left" VerticalAlignment="Top" Content="{TemplateBinding Text}" Margin="2,0,0,0"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TextBox.IsEnabled" Value="False">
                            <!--
                            <Setter Property="Foreground"  Value="Black" />
                            <Setter TargetName="border" Property="BorderBrush" Value="#FFABADB3"/>
                             -->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!-- <Setter Property="Background" Value="#FF5397D1"/>-->
                            <Setter TargetName="border" Property="BorderBrush" Value="#FF3399FF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    
</ResourceDictionary>